use std::time::{Duration, Instant};
use std::thread::sleep;

pub struct PixelDescription {
    pub coordinate: (u16, u16),
    pub description: Vec<i16>,
    pub value: u8,
    pub removed: bool,
    pub feature_pairs: Vec<u8>
}

impl PixelDescription {
    pub fn new() -> PixelDescription {
        PixelDescription { coordinate: (0, 0), description: Vec::new(), value: 0, removed: true, feature_pairs: Vec::<u8>::new() }
    }

    pub fn load_as_fast(coordinate: (u16, u16), src: &Vec<Vec<Vec<u8>>>, threshold: usize)
        -> (bool, PixelDescription)
    {
        let c = coordinate;
        let x = c.0 as i16;
        let y = c.1 as i16;
        let value = src[c.1 as usize][c.0 as usize][0];

        let feature_points = vec![
            (x, y-3),
            (x+1, y-3),
            (x+2, y-2),
            (x+3, y-1),
            (x+3, y),
            (x+3, y+1),
            (x+2, y+2),
            (x+1, y+3),
            (x, y+3),
            (x-1, y+3),
            (x-2, y+2),
            (x-3, y+1),
            (x-3, y+0),
            (x-3, y-1),
            (x-2, y-2),
            (x-1, y-3),
            // repeat
            (x, y-3),
            (x+1, y-3),
            (x+2, y-2),
            (x+3, y-1),
            (x+3, y),
            (x+3, y+1),
            (x+2, y+2),
            (x+1, y+3),
            (x, y+3)
        ];

        let fast_feature_points = vec![
            (x, y-3),
            (x+3, y),
            (x, y+3),
            (x-3, y)
        ];


        let mut total = 0;
        for coor in fast_feature_points {
            let x = coor.0;
            let y = coor.1;
            if x < 0 || y < 0 || y as usize >= src.len() || x as usize >= src[0].len() {
                return (false, PixelDescription::new());
            }
            let coor_value = src[y as usize][x as usize][0];
            let value = (coor_value as i16 - value as i16).abs() as usize;
            if value > threshold {
                total += 1;
            }
        }

        if total < 4 {
            return (false, PixelDescription::new());
        }

        let mut max_hits = 0usize;
        let mut current_hits = 0usize;

        let mut description_values = Vec::<i16>::with_capacity(16);

        for coor in feature_points {
            let x = coor.0;
            let y = coor.1;
            if x < 0 || y < 0 || y as usize >= src.len() || x as usize >= src[0].len() {
                return (false, PixelDescription::new());
            }
            let coor_value = src[coor.1 as usize][coor.0 as usize][0];

            let description_value = (coor_value as i16 - value as i16);
            if description_values.len() < 16 {
                description_values.push(description_value);
            }

            if description_value.abs() as usize > threshold {
                current_hits += 1;
            } else {
                current_hits = 0;
            }
            if current_hits > max_hits {
                max_hits = current_hits;
            }
        }

        if max_hits >= 10 {
            let feature_pairs = PixelDescription::calculate_pair((x as u16, y as u16), src);
            return (true, PixelDescription {
                coordinate: coordinate,
                description: description_values,
                feature_pairs: feature_pairs,
                value: value,
                removed: false
            });
        }
        return (false, PixelDescription::new())
    }

    pub fn calculate_pair(coordinate: (u16, u16), src: &Vec<Vec<Vec<u8>>>) 
        -> Vec<u8>
    {
        let a_distances = [
            3,7,7,14,3,9,4,5,4,13,12,11,13,12,7,3,15,14,5,3,2,6,2,5,8,6,12,8,9,3,5,10,2,8,9,14,2,13,11,14,11,5,15,7,3,10,7,4,5,9,15,7,13,2,12,1,10,4,9,9,4,13,12,6,11,2,9,2,5,11,1,11,14,15,8,2,15,3,11,15,3,10,15,11,4,9,10,8,13,11,4,14,15,10,7,10,14,8,9,10,9,6,15,5,2,3,6,7,12,1,10,4,3,12,13,14,8,15,9,11,10,15,13,5,5,5,13,10,6,5,1,6,3,6,12,1,12,6,4,4,7,12,10,1,12,9,8,1,14,14,11,8,1,15,10,15,2,3,2,3,1,14,5,5,1,12,1,10,3,4,9,8,11,15,2,14,8,10,8,8,9,7,12,6,9,11,12,3,13,14,7,10,6,6,8,4,11,9,10,11,8,3,9,10,1,5,3,12,4,9,1,7,1,9,10,5,14,3,3,15,5,10,5,13,13,15,3,14,5,1,3,15,5,9,2,8,6,6,9,4,15,15,12,8,2,12,8,12,1,15,9,13,9,4,10,11,2,5,7,9,4,9,9,4,9,9,10,12,14,14,10,14,13,10,10,11,7,7,11,3,8,8,9,5,4,10,8,11,7,11,14,4,15,8,1,14,8,12,11,7,6,1,15,9,11,13,15,12,7,4,13,12,3,11,1,4,7,3,2,3,13,15,12,1,4,5,3,4,1,14,3,5,10,9,13,1,10,11,3,3,6,1,1,4,15,9,11,1,13,7,7,2,1,8,8,14,9,3,4,12,6,10,6,7,14,3,8,1,15,2,13,8,14,6,7,9,4,3,5,6,4,6,12,8,7,7,11,3,7,11,13,9,4,10,3,14,3,1,5,7,14,11,12,15,6,3,4,2,2,15,7,13,15,9,1,12,7,9,13,12,7,1,7,10,12,10,10,5,6,11,2,13,12,4,11,5,2,15,3,10,4,11,4,4,7,8,12,4,11,12,14,15,1,2,5,1,9,4,3,13,4,5,10,12,8,12,6,4,13,6,11,15,7,11,10,2,2,14,4,8,11,2,12,13,3,13,12,2,12,2,3,9,3,2,8,11,14,4,15,9,7,7,2,5,6,1,14,9,11,5,13,11,8,11,12,15,7,4,14,14,6,2,6,1,4,10,13,2,10,4,5,4,8,9,12,3,11,3,12,9,10,10,12,12,3,15,4,5,7,9,11,10,14,14,3,6,15,4,9,13,6,9,3,1,3,14,13,4,15,11,1,11,13,8,15,5,4,11,13,14,12,1,8,10,9,2,8,3,1,5,10,14,3,12,7,11,4,4,4,1,9,2,10,12,4,3,14,14,12,6,7,7,5,7,4,8,5,14,5,5,4,8,9,2,9,15,15,10,1,11,15,7,5,6,10,3,7,8,9,8,14,9,5,12,6,15,6,1,13,10,11,14,15,8,3,11,11,7,11,4,2,7,12,10,10,12,8,10,3,15,3,14,12,2,15,7,8,11,7,4,6,8,7,14,4,4,12,11,4,8,2,8,7,1,8,5,10,8,2,10,10,12,14,13,6,14,10,11,7,15,2,15,10,2,2,8,7,3,2,8,3,13,12,10,2,3,3,3,3,11,2,3,6,9,10,2,7,1,1,2,14,9,11,6,6,12,8,8,5,1,3,11,2,5,15,7,2,3,3,13,1,10,14,3,7,8,5,3,9,2,12,9,2,11,12,4,1,15,9,2,14,3,3,11,11,9,15,12,10,10,2,3,5,3,1,15,10,5,13,2,12,4,1,8,1,14,1,1,15,8,2,11,9,4,3,5,2,4,1,9,10,12,11,14,4,15,7,3,14,10,6,14,3,4,2,1,7,11,1,13,8,5,3,14,2,2,8,5,7,6,3,8,1,15,2,14,11,11,7,7,11,8,14,11,3,7,1,13,15,7,11,14,15,14,1,10,10,4,4,6,5,9,11,13,11,2,5,9,5,15,5,8,15,3,1,3,1,5,8,5,3,9,2,4,10,9,10,9,9,13,12,11,9,13,6,5,9,12,3,1,9,7,8,2,3,10,3,12,14,11,4,11,14,14,7,6,9,11,7,8,7,2,10,15,3,9,10,15,10,14,6,15,11,6,6,8,8,9,1,6,8,15,15,13,14,4,7,5,1,14,15,14,4,11,15,5,6,6,14,6,11,4,1,3,6,12,7,13,4,14,1,4,6,3,14,2,15,5,15,2,10,9,2,1,1,6,12,15,11,2,4,5,10,11,12,10,3,2,7,3,2,7,3,5
        ].to_vec();
        let a_angles = [
            150,53,287,57,321,275,356,196,261,178,286,101,218,356,10,127,56,247,190,13,167,191,33,184,305,0,300,125,114,5,51,119,340,309,88,214,354,128,155,353,209,187,114,311,73,215,286,107,317,313,269,96,318,155,222,46,137,238,124,222,250,134,156,286,152,87,37,227,39,112,135,59,249,23,128,258,35,144,24,264,250,244,185,219,63,293,305,41,307,177,121,211,75,356,337,7,4,343,29,146,290,315,222,146,46,3,10,133,210,297,269,197,110,270,14,139,349,65,170,261,24,241,330,164,161,229,197,146,234,159,303,279,114,155,97,214,345,236,66,321,0,293,321,346,131,176,81,216,69,180,62,324,101,63,275,203,101,207,276,237,113,260,254,212,35,70,168,353,206,193,91,120,115,239,259,69,300,102,92,273,208,71,32,14,11,252,54,96,141,281,170,183,46,12,257,303,209,206,78,297,180,102,281,102,192,80,240,20,114,87,67,110,78,211,270,291,185,106,246,243,347,124,182,42,159,17,62,289,265,265,140,276,13,80,107,15,338,136,180,93,196,106,142,195,161,72,137,90,141,184,26,188,251,149,118,295,238,230,324,236,40,91,320,88,190,247,196,140,82,168,50,37,162,311,206,223,140,213,77,202,0,321,245,196,167,233,75,86,238,84,335,209,144,68,243,30,344,111,57,105,225,243,304,83,252,109,72,65,75,1,66,173,267,82,71,267,253,333,83,276,240,94,160,354,3,268,356,93,202,63,62,237,121,244,180,88,142,271,65,266,131,92,314,8,304,202,206,151,27,200,23,135,304,90,276,282,292,242,46,228,134,203,240,289,112,129,78,343,104,206,127,81,208,142,292,82,19,345,228,10,230,331,355,99,51,225,329,107,106,213,40,292,37,172,131,328,27,39,198,285,231,270,302,255,270,229,329,119,298,106,148,247,177,180,22,64,183,305,343,159,303,320,340,221,91,122,89,174,210,153,79,319,206,108,104,27,291,251,198,237,339,232,100,87,203,299,320,78,339,205,48,277,159,166,92,76,247,49,94,24,53,256,334,272,138,205,24,270,99,315,205,219,224,178,74,347,200,274,212,251,12,262,126,297,262,142,7,211,217,229,164,43,96,212,193,174,151,133,44,213,314,199,95,230,214,81,12,233,275,300,122,345,330,273,162,317,333,230,91,128,275,194,158,307,328,17,271,233,327,288,264,222,212,214,68,44,239,58,157,138,343,239,116,81,13,202,89,27,198,236,11,245,280,201,37,356,199,316,109,19,333,228,218,55,245,105,323,204,51,28,171,90,256,2,295,35,147,294,223,285,324,176,35,24,118,44,7,217,189,181,15,39,65,32,191,292,75,159,102,242,86,14,212,57,137,22,60,209,172,134,208,120,45,277,301,138,122,164,209,39,61,73,11,44,287,184,331,56,197,25,302,87,83,344,313,142,184,52,264,93,261,69,182,210,357,97,224,19,186,116,152,54,21,202,182,190,152,265,142,69,52,199,267,358,129,139,318,83,208,304,127,222,115,178,266,57,118,155,97,333,315,49,110,248,52,314,96,334,75,114,87,52,135,217,43,136,5,64,106,189,189,218,319,141,41,198,230,345,65,176,126,350,340,161,346,181,47,296,354,296,7,325,290,116,32,211,16,217,235,56,297,332,226,75,306,31,8,3,172,118,16,210,228,198,214,18,210,157,171,27,238,302,21,154,99,95,177,32,276,193,7,165,67,117,173,224,312,25,314,122,41,145,120,52,122,340,267,281,277,197,217,229,306,159,154,332,178,176,234,311,168,259,167,237,44,343,289,29,249,352,297,5,180,183,334,246,53,342,117,166,38,165,270,233,66,55,191,282,338,91,348,220,165,287,16,82,285,127,350,82,254,349,134,23,242,166,305,203,238,238,310,163,295,184,149,204,249,142,99,186,72,113,286,226,326,18,295,106,190,115,269,116,326,117,77,172,201,192,21,345,310,152,207,352,324,294,46,146,332,179,199,50,332,342,14,174,149,254,325,268,343,337,206,295,335,54,250,160,182,45,86,122,336,0,173,226,189,111,222,310,28,66,20,296,249,35,31,45,128,73,161,353,154,287,137,52,250,75,324,306,90,198,136,188,284,13,348,301,95,310,183,305,303,147,270,258,13,111,262,271,291,21,181,324,186,193,269,151,153,215,355,323,31,143,135,232,345,84,260,83,71,186,233,308,298,120,189,155,301,140,350,114,276,318,126,110,4,191,159,326,179,213,280,34,223,310,226,281,38,195,209,13,232,274,133,85,45,263,109,19,348,181,319,223,126,246,167,185,184,77,247,358,318,235
        ].to_vec();

        let b_distances = [
            11,10,7,15,11,2,6,10,2,2,2,10,8,13,15,6,9,5,12,15,4,12,3,6,12,14,12,8,5,2,11,13,2,3,12,1,3,15,3,5,4,2,6,15,12,4,10,11,4,5,9,2,7,13,2,12,14,7,9,3,6,1,6,6,1,4,3,7,7,13,5,1,13,7,14,5,11,9,5,11,14,10,4,15,13,6,13,5,2,5,14,3,13,6,10,11,5,1,9,3,4,3,9,5,8,6,11,7,1,15,6,8,7,14,2,8,14,14,2,14,12,7,7,5,13,10,14,13,15,14,2,8,3,2,12,3,6,12,2,13,3,11,11,6,4,9,2,8,2,8,12,2,8,11,7,14,14,5,8,11,10,4,4,13,7,11,6,12,5,15,12,8,12,14,9,15,8,10,4,5,10,2,3,3,3,2,5,2,8,10,12,12,10,2,6,10,7,9,14,8,6,9,14,12,12,6,12,11,9,6,4,7,13,6,14,7,5,8,13,11,10,15,11,1,3,13,11,3,15,1,7,6,13,14,6,14,11,4,8,3,5,9,9,7,3,12,7,4,7,6,5,11,3,14,10,15,3,15,1,13,9,14,9,9,3,9,5,13,6,12,13,7,8,2,6,4,11,13,10,14,14,14,3,5,15,5,11,9,9,8,15,13,6,4,14,1,11,10,15,11,4,4,6,15,6,4,15,6,3,13,1,12,13,4,3,13,10,1,1,12,5,8,13,13,4,15,14,2,5,8,3,1,1,9,7,2,8,5,10,8,13,7,13,3,10,3,13,2,11,3,4,4,2,11,10,14,1,11,7,3,3,2,3,13,13,5,7,14,7,3,4,12,6,9,9,2,4,14,1,15,14,9,9,12,12,7,9,14,2,7,10,12,6,12,7,8,1,6,5,4,7,14,11,9,3,3,15,9,8,9,6,12,5,3,3,9,5,12,2,4,10,10,15,10,3,2,1,6,8,1,8,12,15,7,6,1,10,12,11,10,4,13,7,1,8,6,10,13,3,5,2,12,5,9,3,6,7,2,1,7,4,10,8,5,13,2,2,11,13,15,12,15,15,5,10,3,14,7,3,13,14,4,2,10,2,3,9,6,9,9,10,14,7,1,7,12,5,5,3,6,4,1,4,8,5,2,6,7,4,12,10,5,9,9,2,10,12,2,5,8,14,5,12,2,14,7,12,9,7,4,10,6,13,3,15,7,11,11,5,7,10,1,3,10,11,6,14,4,11,11,12,13,10,8,10,3,14,6,12,11,15,13,15,5,4,1,1,14,12,14,1,2,7,15,2,8,9,15,5,1,12,3,9,12,12,11,5,3,14,7,6,9,13,15,10,12,8,4,11,1,12,4,11,7,8,10,10,5,9,1,1,10,12,13,15,3,5,14,13,1,14,10,8,15,4,15,5,6,13,6,13,2,6,5,3,14,15,4,13,6,11,10,13,3,9,13,13,2,8,7,13,5,11,11,9,12,9,12,6,1,5,8,14,2,5,8,9,7,9,3,4,2,4,3,14,6,4,8,1,9,5,12,6,15,12,10,1,15,2,1,8,3,6,3,3,2,12,14,12,5,15,1,2,14,9,12,15,12,4,1,3,2,2,11,14,12,12,2,4,11,7,11,11,3,7,8,15,4,11,2,12,15,5,14,1,15,14,9,8,2,15,12,14,7,12,3,11,11,11,6,1,12,12,4,6,4,2,8,9,14,7,7,5,6,8,11,14,9,12,6,10,12,5,9,5,12,13,6,8,5,13,8,8,4,8,7,2,8,12,7,13,11,1,12,9,15,2,5,11,3,4,14,9,8,10,10,2,12,4,1,5,10,3,15,13,11,8,1,7,1,10,3,8,4,13,8,14,8,9,12,12,14,15,3,11,9,3,2,8,4,12,6,8,5,15,8,8,10,9,3,10,3,3,9,8,1,11,3,7,6,12,9,12,10,8,4,8,13,2,9,9,15,3,9,15,4,12,5,2,12,10,13,6,7,8,1,14,6,14,7,13,11,2,1,3,12,14,13,9,13,10,10,11,8,9,2,12,1,15,8,14,15,5,8,12,15,15,5,13,5,14,12,13,4,4,6,6,15,5,15,5,14,12,15,8,4,8,9,12,6,5,13,5,5,7,15,14,3,8,3,15,7,13,4,7,3,8,13,8,10,4,5,3,13,15,13,13,7,10,13,6,5,2,1,8,15,1,7,8,15,8,11,14,2,6,15,3,8,7,12,10,7,15,13,6,4,15,8,15,4,14,6,5,1,14,10,9,11,2,3,9,11,15,5,12,3,15,12,14,8,15,15,9,4
        ].to_vec();
        let b_angles = [
            287,209,6,295,236,112,69,0,245,37,103,136,108,29,125,306,136,318,226,20,94,276,76,328,270,142,114,9,235,266,183,260,102,139,293,232,101,3,169,307,303,338,75,87,70,154,297,54,358,342,247,54,44,238,22,253,29,90,246,95,267,352,58,292,225,276,110,358,246,234,197,57,331,241,275,116,203,59,87,315,98,62,66,74,98,121,237,277,306,42,272,129,208,115,66,249,232,257,232,54,316,152,346,270,57,252,40,19,166,32,175,337,252,189,182,70,306,255,24,2,66,239,114,250,295,18,259,74,51,210,150,115,339,47,344,3,202,317,133,20,97,316,36,268,304,18,80,62,320,231,20,83,174,67,164,170,289,96,138,2,356,22,176,187,70,242,323,342,167,251,345,136,310,212,290,61,262,248,36,74,93,62,340,231,69,323,66,281,11,321,14,179,97,159,80,329,90,35,18,284,178,127,296,198,247,249,181,40,118,145,210,327,136,22,24,145,283,14,7,129,154,254,68,301,221,0,47,167,149,70,314,221,155,195,250,181,236,330,1,305,250,13,269,213,63,143,165,69,192,181,220,258,356,137,301,175,231,307,112,353,101,37,343,241,71,71,133,147,98,302,293,249,303,18,33,45,133,340,13,330,76,43,54,195,345,101,338,230,168,281,163,43,244,67,30,75,131,183,132,353,159,95,181,9,161,167,305,147,258,180,227,307,321,196,116,144,30,73,41,321,47,350,163,80,87,0,329,26,291,198,120,276,145,216,48,280,69,276,164,150,186,59,284,312,313,172,307,177,57,305,200,271,46,119,133,70,269,207,251,136,325,152,19,243,277,0,238,275,160,52,291,45,70,154,104,85,319,342,98,4,101,169,62,105,4,346,153,37,225,247,218,210,152,167,90,322,298,202,1,301,161,59,40,242,127,331,341,178,166,300,196,243,137,179,314,15,343,188,98,261,58,19,306,216,69,240,319,55,102,67,350,341,343,93,59,350,244,228,153,255,36,319,190,1,134,118,151,70,285,100,343,267,319,105,294,332,223,259,272,289,105,305,182,144,61,291,192,139,19,36,146,275,164,317,309,219,174,210,150,188,339,70,83,233,194,254,218,137,340,151,76,134,101,119,22,4,83,245,16,190,110,136,60,232,153,322,97,321,1,277,337,13,92,174,192,328,144,91,194,201,32,330,221,74,214,36,313,223,267,8,89,190,324,209,207,2,236,166,59,92,68,52,74,266,179,114,234,342,130,167,297,300,293,4,196,33,195,23,71,29,95,221,206,209,259,20,203,15,253,118,147,221,325,117,134,29,104,266,276,118,191,82,290,324,36,149,42,124,21,268,308,198,47,333,153,206,272,71,256,241,144,329,69,307,328,100,257,204,357,63,288,337,311,54,325,33,101,221,268,345,146,35,231,188,201,219,125,18,351,292,126,126,303,128,312,107,3,156,308,72,300,238,176,234,64,165,77,312,106,87,11,68,209,221,210,145,252,82,227,105,214,69,71,357,151,69,263,5,167,22,355,162,238,261,219,65,72,283,37,14,116,181,231,117,259,17,168,34,182,186,133,66,337,70,301,85,224,184,235,111,309,54,160,248,96,259,164,199,305,121,163,228,40,36,339,182,326,267,36,330,85,8,216,1,329,154,205,280,292,162,78,184,334,239,6,199,30,243,327,190,232,302,145,272,87,245,155,54,149,310,132,302,112,137,318,81,321,193,244,122,65,48,191,225,11,146,118,67,46,151,28,213,128,247,29,143,127,240,84,266,205,121,265,188,209,99,139,155,325,83,166,193,186,98,177,127,82,280,68,39,344,69,116,29,24,33,357,313,88,315,288,131,269,184,184,331,104,258,302,231,67,153,174,32,145,202,106,113,118,129,27,22,175,111,38,232,282,183,169,293,55,20,249,201,335,201,343,351,259,340,250,72,221,154,147,306,357,39,159,162,221,103,41,245,40,40,100,164,250,213,22,148,76,268,35,88,281,98,230,281,23,197,76,11,182,41,99,70,286,127,186,349,175,317,90,44,346,262,144,111,106,147,202,230,235,20,212,49,342,253,349,333,107,190,43,175,306,194,135,107,86,57,318,299,53,20,217,82,338,339,115,265,232,324,8,191,347,251,318,130,115,96,358,109,119,230,281,91,97,330,34,350,353,163,110,150,175,321,319,218,108,49,275,63,266,284,255,301,125,312,217,40,266,100,113,287,239,150,251,300,281,213,121,82,231,199,14,70,189,199,66,214,37,67,168,24,21,358,41,338,237,81,93,187,312,313,48,178,69,141,319,198,350,338,325,224,290,226,280,5,239,203,130,165    
        ].to_vec();
        let n = 1024; 
        let mut vec = Vec::<u8>::with_capacity(1024);
        for i in 0..n {
            let ax = (a_angles[i] as f32).cos() * (a_distances[i] as f32).round() + coordinate.0 as f32;
            let ay = (a_angles[i] as f32).sin() * (a_distances[i] as f32).round() + coordinate.1 as f32;

            let bx = (b_angles[i] as f32).cos() * (b_distances[i] as f32).round() + coordinate.0 as f32;
            let by = (b_angles[i] as f32).sin() * (b_distances[i] as f32).round() + coordinate.1 as f32;
            
            if ax >= 0.0 && ay >= 0.0 && bx >= 0.0 && by >= 0.0 {
                let default_row = Vec::<Vec<u8>>::new();
                let row = src.get(ay as usize).unwrap_or_else(|| &default_row);
                let default_pixel = Vec::<u8>::new();
                let a_value = row.get(ax as usize).unwrap_or_else(|| &default_pixel);

                let default_row = Vec::<Vec<u8>>::new();
                let row = src.get(by as usize).unwrap_or_else(|| &default_row);
                let default_pixel = Vec::<u8>::new();
                let b_value = row.get(bx as usize).unwrap_or_else(|| &default_pixel);

                if a_value.len() > 0 && b_value.len() > 0 {
                    if a_value[0] > b_value[0] {
                        vec.push(1);
                    } else {
                        vec.push(0);
                    }
                }
            }
        }
        vec
    }

    pub fn maximum_value(&self)
        -> i32
    {
        let mut total = 0;
        for description_value in &self.description {
            total += (description_value.clone() as i32).abs();
        }
        total
    }

    pub fn remove(&mut self) {
        self.removed = true;
    }

    // greater threshold is more similar
    pub fn most_similar_desc(&self, others: &Vec<PixelDescription>, threshold: i32, x_threshold: i32, y_threshold: i32)
        -> Result<(PixelDescription, PixelDescription), &'static str>
    {
        let mut most_similarity = 0;
        let mut most_similar_one = PixelDescription::new();
        for other in others {
            let current_similarity = self.similarity(&other);
            if current_similarity > most_similarity {
                most_similarity = current_similarity;
                most_similar_one = other.clone();
            }
        }

        let x_distance = (self.coordinate.0 as i32 - most_similar_one.coordinate.0 as i32).abs();
        let y_distance = (self.coordinate.1 as i32 - most_similar_one.coordinate.1 as i32).abs();

        if most_similarity > threshold && x_distance < x_threshold && y_distance < y_threshold {
            // println!("{}", most_similarity);
            return Ok((self.clone(), most_similar_one));
        }
        return Err("Can not find similar desc");
    }

    pub fn similarity(&self, other: &PixelDescription) -> i32 {
        let mut s = 0;
        for i in 0..self.feature_pairs.len() {
            if self.feature_pairs.len() == other.feature_pairs.len() && self.feature_pairs[i] == other.feature_pairs[i] {
                s += 1;
            }
        }
        s
    }

    // greater threshold is more similar
    pub fn match_points(descriptions: &Vec<PixelDescription>, others: &Vec<PixelDescription>, threshold: i32, x_threshold: i32, y_threshold: i32)
        -> Vec<(PixelDescription, PixelDescription)>
    {
        let now = Instant::now();
        let mut points = Vec::<(PixelDescription, PixelDescription)>::new();
        for desc in descriptions {
            let the_most = desc.most_similar_desc(others, threshold, x_threshold, y_threshold);
            match the_most {
                Ok(v) => points.push(v),
                Err(e) => {},
            }
        }
        println!("Spend ms on match points:{}", now.elapsed().as_millis());
        // PixelDescription::filter_pair(&points)
        points
    }

    pub fn filter_pair(pairs: &Vec<(PixelDescription, PixelDescription)>)
        -> Vec<(PixelDescription, PixelDescription)>
    {
        // Find the Standard Deviation of distances
        fn find_distance_variance(pairs: &Vec<(PixelDescription, PixelDescription)>) -> f32 {
            let mut distances = Vec::<f32>::new();
            let mut total_distance = 0.0;
            for pair in pairs {
                let ax = pair.0.coordinate.0 as f32;
                let ay = pair.0.coordinate.1 as f32;

                let bx = pair.1.coordinate.0 as f32;
                let by = pair.1.coordinate.1 as f32;
                let distance = ((ax - bx).powi(2) + (ay - by).powi(2)).sqrt();
                total_distance += distance;
                distances.push(distance);
            }
            let avg_distance = total_distance/pairs.len() as f32;
            let mut variance = 0.0;
            for distance in distances {
                variance += (distance - avg_distance).powi(2);
            }
            variance.sqrt()
        }

        // Find the Standard Deviation of distances
        fn find_cosinus_variance(pairs: &Vec<(PixelDescription, PixelDescription)>) -> f32 {
            let mut cosinuses = Vec::<f32>::new();
            let mut total = 0.0;
            for pair in pairs {
                let ax = pair.0.coordinate.0 as f32;
                let ay = pair.0.coordinate.1 as f32;

                let bx = pair.1.coordinate.0 as f32;
                let by = pair.1.coordinate.1 as f32;
                let distance = ((ax - bx).powi(2) + (ay - by).powi(2)).sqrt();
                let cos = (ax-bx)/distance;
                total += cos;
                cosinuses.push(cos);
            }
            let avg_cos = total/pairs.len() as f32;
            let mut variance = 0.0;
            for cos in cosinuses {
                variance += (cos - avg_cos).powi(2);
            }
            variance.sqrt()
        }
        let distance_variance = find_distance_variance(pairs);
        let cosinus_variance = find_cosinus_variance(pairs);

        let mut new_pairs = Vec::<(PixelDescription, PixelDescription)>::new();

        for i in 0..pairs.len() {
            let mut tmp_pairs = pairs.to_vec();
            tmp_pairs.remove(i);
            let new_dv = find_distance_variance(&tmp_pairs);
            let new_cv = find_cosinus_variance(&tmp_pairs);
            println!("TOTAL: DV: {:?}, CV: {:?}; NEW DV:{:?}, CV:{:?}", distance_variance, cosinus_variance, new_dv, new_cv);
            if distance_variance - new_dv > 1.0 {
                if cosinus_variance - new_cv > 0.00001 {
                    new_pairs.push(pairs[i].clone());
                }
            }
        }

        new_pairs
    }
}

impl Clone for PixelDescription {
    fn clone(&self) -> PixelDescription {
        PixelDescription {
            coordinate: self.coordinate.clone(),
            description: self.description.clone(),
            value: self.value.clone(),
            removed: self.removed.clone(),
            feature_pairs: self.feature_pairs.to_vec()
        }
    }
}